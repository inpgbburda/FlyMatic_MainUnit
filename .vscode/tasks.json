{
   "version": "2.0.0",
   "tasks": [
      {
         "type": "shell",
         "label": "Generate CMake for RASP TYPE=Release",
         "command": "cmake -B ../Builds/ -D_RASP=ON -DCMAKE_BUILD_TYPE=Release",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/SW_components"
         },
         "group": {
            "kind": "build",
            "isDefault": true
         }
      },
      {
         "type": "shell",
         "label": "Generate CMake for RASP TYPE=Debug",
         "command": "cmake -B ../Builds/ -D_RASP=ON -DCMAKE_BUILD_TYPE=Debug",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/SW_components"
         },
         "group": {
            "kind": "build",
            "isDefault": true
         }
      },
      {
         "type": "shell",
         "label": "Build",
         "command": "make",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Builds"
         },
         "problemMatcher": {
            "base": "$gcc"
         },
         "group": "build"
      },
      {
         "type": "shell",
         "label": "Clean",
         "command": "make clean",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Builds"
         },
         "problemMatcher": {
            "base": "$gcc"
         },
         "group": "build"
      },
      {
         "type": "shell",
         "label": "Generate CMake tests",
         "command": "cmake -B Builds/",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Testing"
         },
         "group": {
            "kind": "test",
            "isDefault": true
         }
      },
      {
         "type": "shell",
         "label": "Build tests",
         "command": "make",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Testing/Builds"
         },
         "group": {
            "kind": "test",
            "isDefault": true
         },
         "problemMatcher": {
            "base": "$gcc",
         },
      },
      {
         "type": "shell",
         "label": "Run tests",
         "command": "./tests",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Testing/Builds"
         },
         "group": {
            "kind": "test",
            "isDefault": true
         }
      },

      {
         "type": "shell",
         "label": "Run App",
         "command": "sudo ./DroneExec",
         "args": [],
         "options": {
            "cwd": "${workspaceFolder}/Builds"
         },
         "group": {
            "kind": "test",
            "isDefault": true
         }
      },
      /*Unit tests*/
      {
        "type": "shell",
        "label": "Unit Tests - I2C - build",
        "command": "bash",
        "args": [
            "-c",
            "make all 2>&1 | sed 's|/cygdrive/d/|D:/|g; s|${workspaceFolder}/|./|g'"
        ],
        "options": {
            "cwd": "${workspaceFolder}/SW_components/04_Drv/i2c/i2c_UT/builds_UT/"
        },
        "problemMatcher": {
            "base": "$gcc"
        },
    },
    {
        "type": "shell",
        "label": "Unit Tests - I2C - clean",
        "command": "make clean",
        "args": [],
        "options": {
            "cwd": "${workspaceFolder}/SW_components/04_Drv/i2c/i2c_UT/builds_UT/"
        },
    },
    {
        "type": "shell",
        "label": "Unit Tests - I2C - run",
        "command": "I2C_UT.exe",
        "args": [],
        "options": {
            "cwd": "${workspaceFolder}/SW_components/04_Drv/i2c/i2c_UT/builds_UT/"
        },
    },
        {
            "type": "shell",
            "label": "Unit Tests - MPU6050 - build",
            "command": "bash",
            "args": [
                "-c",
                "make all 2>&1 | sed 's|/cygdrive/d/|D:/|g; s|${workspaceFolder}/|./|g'"
            ],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/mpu6050/mpu6050_UT/builds_UT"
            },
            "problemMatcher": {
                "base": "$gcc"
            },
        },
        {
            "type": "shell",
            "label": "Unit Tests - MPU6050 - clean",
            "command": "make clean",
            "args": [],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/mpu6050/mpu6050_UT/builds_UT"
            },
        },
        {
            "type": "shell",
            "label": "Unit Tests - MPU6050 - run",
            "command": "mpu6050_UT.exe",
            "args": [],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/mpu6050/mpu6050_UT/builds_UT"
            },
        },
        {
            "type": "shell",
            "label": "Unit Tests - Balancer - build",
            "linux": "true",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "make all 2>&1 | sed 's|/cygdrive/d/|D:/|g; s|${workspaceFolder}/|./|g'"
            ],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/flight_control/balancer_UT/builds_UT"
            },
            "problemMatcher": {
                "base": "$gcc"
            },
        },
        {
            "type": "shell",
            "label": "Unit Tests - Balancer - clean",
            "group": "test",
            "command": "make clean",
            "args": [],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/flight_control/balancer_UT/builds_UT"
            },
        },
        {
            "type": "shell",
            "label": "Unit Tests - Balancer - run",
            "command": "balancer_UT.exe",
            "group": "test",
            "args": [],
            "options": {
                "cwd": "${workspaceFolder}/SW_components/03_IoHwab/flight_control/balancer_UT/builds_UT"
            },
        },
        {
            "label": "Unit Tests - Build all UTs",
            "dependsOrder": "sequence",
            "dependsOn": ["Unit Tests - MPU6050 - build", "Unit Tests - Balancer - build", "Unit Tests - I2C - build"]
        },
        {
            "label": "Unit Tests - Run all UTs",
            "dependsOrder": "sequence",
            "dependsOn": ["Unit Tests - MPU6050 - run", "Unit Tests - Balancer - run", "Unit Tests - I2C - run"]
        }
   ]
}